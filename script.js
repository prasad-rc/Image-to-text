    // Load TensorFlow.js Model (COCO-SSD)
    let cocoSsdModel;

    cocoSsd.load()
    .then((loadedModel) => {
        cocoSsdModel = loadedModel;
        console.log("COCO-SSD Loaded Successfully.");
        document.getElementById("loading").style.display = "none";
    })
    .catch((err) => {
        console.error("Error loading COCO-SSD:", err);
        document.getElementById("detectedObjects").innerHTML = "<li>Model loading failed</li>";
        document.getElementById("loading").style.display = "none";
    });

    // DOM Elements
    const imageUpload = document.getElementById("imageUpload");
    const uploadedImage = document.getElementById("uploadedImage");
    const detectedObjectsList = document.getElementById("detectedObjects");
    const speakBtn = document.getElementById("speakBtn");
    const loadingDiv = document.getElementById("loading");

    // Handle Image Upload
    imageUpload.addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file) {
        loadingDiv.style.display = "block";
        const reader = new FileReader();
        reader.onload = function (event) {
        uploadedImage.src = event.target.result;
        uploadedImage.style.display = "block";
        uploadedImage.onload = detectObjects;
        };
        reader.readAsDataURL(file);
        uploadedImage.onerror = () => {
        console.error("Failed to load image.");
        detectedObjectsList.innerHTML = "<li>Failed to load image</li>";
        loadingDiv.style.display = "none";
        };
    }
    });

    // Object Detection Function
    async function detectObjects() {
    if (!cocoSsdModel) {
        detectedObjectsList.innerHTML = "<li>Model not loaded</li>";
        loadingDiv.style.display = "none";
        return;
    }
    if (!uploadedImage.complete || uploadedImage.naturalWidth === 0) {
        detectedObjectsList.innerHTML = "<li>Image not loaded properly</li>";
        loadingDiv.style.display = "none";
        return;
    }

    const predictions = await cocoSsdModel.detect(uploadedImage);
    const detectedObjects = [];

    for (const prediction of predictions) {
        if (prediction.score > 0.7) {
        let label = prediction.class;
        let confidence = (prediction.score * 100).toFixed(2);

        if (label === "person") {
            const gender = await classifyGender(uploadedImage, prediction.bbox);
            label = gender ? `${gender} person` : "person";
        }

        detectedObjects.push({ label, confidence });
        }
    }

    detectedObjectsList.innerHTML = detectedObjects
        .map((obj) => `<li>${obj.label} (${obj.confidence}%)</li>`)
        .join("");

    if (detectedObjects.length > 0) {
        const firstLabel = detectedObjects[0].label;
        getKannadaTranslation(firstLabel);
    } else {
        detectedObjectsList.innerHTML = "<li>No objects detected</li>";
        speakBtn.disabled = true;
        loadingDiv.style.display = "none";
    }
    }

    // Placeholder for Gender Classification
    async function classifyGender(image, bbox) {
    return "male"; // Placeholder; replace with actual gender classification if needed
    }

    // Fetch Kannada Translation & Generate Kanglish
    function getKannadaTranslation(text) {
    const localTranslations = {
        dog: "‡≤®‡≤æ‡≤Ø‡≤ø", cat: "‡≤¨‡≥Ü‡≤ï‡≥ç‡≤ï‡≥Å", horse: "‡≤ï‡≥Å‡≤¶‡≥Å‡≤∞‡≥Ü", cow: "‡≤π‡≤∏‡≥Å", sheep: "‡≤ï‡≥Å‡≤∞‡≤ø",
        goat: "‡≤Æ‡≥á‡≤ï‡≥Ü", pig: "‡≤π‡≤Ç‡≤¶‡≤ø", elephant: "‡≤Ü‡≤®‡≥Ü", tiger: "‡≤π‡≥Å‡≤≤‡≤ø", lion: "‡≤∏‡≤ø‡≤Ç‡≤π",
        bear: "‡≤ï‡≤∞‡≤°‡≤ø", monkey: "‡≤ï‡≥ã‡≤§‡≤ø", snake: "‡≤π‡≤æ‡≤µ‡≥Å", fish: "‡≤Æ‡≥Ä‡≤®‡≥Å", bird: "‡≤™‡≤ï‡≥ç‡≤∑‡≤ø",
        chicken: "‡≤ï‡≥ã‡≤≥‡≤ø", duck: "‡≤¨‡≤æ‡≤§‡≥Å‡≤ï‡≥ã‡≤≥‡≤ø", rabbit: "‡≤Æ‡≥ä‡≤≤", car: "‡≤ï‡≤æ‡≤∞‡≥Å", bus: "‡≤¨‡≤∏‡≥ç",
        bicycle: "‡≤∏‡≥à‡≤ï‡≤≤‡≥ç", motorbike: "‡≤Æ‡≥ã‡≤ü‡≤æ‡≤∞‡≥ç ‡≤¨‡≥à‡≤ï‡≥ç", train: "‡≤∞‡≥à‡≤≤‡≥Å", airplane: "‡≤µ‡≤ø‡≤Æ‡≤æ‡≤®",
        boat: "‡≤¶‡≥ã‡≤£‡≤ø", truck: "‡≤ü‡≥ç‡≤∞‡≤ï‡≥ç", chair: "‡≤ï‡≥Å‡≤∞‡≥ç‡≤ö‡≤ø", table: "‡≤Æ‡≥á‡≤ú‡≥Å", "dining table": "‡≤ä‡≤ü‡≤¶ ‡≤Æ‡≥á‡≤ú‡≥Å",
        sofa: "‡≤∏‡≥ã‡≤´‡≤æ", bed: "‡≤π‡≤æ‡≤∏‡≤ø‡≤ó‡≥Ü", desk: "‡≤Æ‡≥á‡≤ú‡≥Å", wardrobe: "‡≤¨‡≥Ä‡≤∞‡≥Å", bottle: "‡≤∏‡≥Ä‡≤∏‡≥Ü",
        cup: "‡≤ï‡≤™‡≥ç", plate: "‡≤§‡≤ü‡≥ç‡≤ü‡≥Ü", spoon: "‡≤ö‡≤Æ‡≤ö", fork: "‡≤´‡≥ã‡≤∞‡≥ç‡≤ï‡≥ç", knife: "‡≤ö‡≤æ‡≤ï‡≥Å",
        bowl: "‡≤¨‡≤ü‡≥ç‡≤ü‡≤≤‡≥Å", clock: "‡≤ó‡≤°‡≤ø‡≤Ø‡≤æ‡≤∞", lamp: "‡≤¶‡≥Ä‡≤™", television: "‡≤ü‡≥Ü‡≤≤‡≤ø‡≤µ‡≤ø‡≤∑‡≤®‡≥ç",
        "tv monitor": "‡≤ü‡≤ø‡≤µ‡≤ø ‡≤Æ‡≤æ‡≤®‡≤ø‡≤ü‡≤∞‡≥ç", computer: "‡≤ï‡≤Ç‡≤™‡≥ç‡≤Ø‡≥Ç‡≤ü‡≤∞‡≥ç", phone: "‡≤´‡≥ã‡≤®‡≥ç",
        refrigerator: "‡≤´‡≥ç‡≤∞‡≤ø‡≤ú‡≥ç", microwave: "‡≤Æ‡≥à‡≤ï‡≥ç‡≤∞‡≥ã‡≤µ‡≥á‡≤µ‡≥ç", oven: "‡≤ì‡≤µ‡≤®‡≥ç", tree: "‡≤Æ‡≤∞",
        flower: "‡≤π‡≥Ç‡≤µ‡≥Å", grass: "‡≤π‡≥Å‡≤≤‡≥ç‡≤≤‡≥Å", mountain: "‡≤™‡≤∞‡≥ç‡≤µ‡≤§", river: "‡≤®‡≤¶‡≤ø", ocean: "‡≤∏‡≤Æ‡≥Å‡≤¶‡≥ç‡≤∞",
        lake: "‡≤∏‡≤∞‡≥ã‡≤µ‡≤∞", forest: "‡≤Ö‡≤∞‡≤£‡≥ç‡≤Ø", sky: "‡≤Ü‡≤ï‡≤æ‡≤∂", sun: "‡≤∏‡≥Ç‡≤∞‡≥ç‡≤Ø", moon: "‡≤ö‡≤Ç‡≤¶‡≥ç‡≤∞",
        star: "‡≤®‡≤ï‡≥ç‡≤∑‡≤§‡≥ç‡≤∞", cloud: "‡≤Æ‡≥ã‡≤°", apple: "‡≤∏‡≥á‡≤¨‡≥Å", banana: "‡≤¨‡≤æ‡≤≥‡≥Ü‡≤π‡≤£‡≥ç‡≤£‡≥Å", orange: "‡≤ï‡≤ø‡≤§‡≥ç‡≤§‡≤≥‡≥Ü",
        mango: "‡≤Æ‡≤æ‡≤µ‡≤ø‡≤® ‡≤π‡≤£‡≥ç‡≤£‡≥Å", grape: "‡≤¶‡≥ç‡≤∞‡≤æ‡≤ï‡≥ç‡≤∑‡≤ø", carrot: "‡≤ï‡≥ç‡≤Ø‡≤æ‡≤∞‡≥Ü‡≤ü‡≥ç", potato: "‡≤Ü‡≤≤‡≥Ç‡≤ó‡≤°‡≥ç‡≤°‡≥Ü",
        tomato: "‡≤ü‡≥ä‡≤Æ‡≥á‡≤ü‡≥ä", onion: "‡≤à‡≤∞‡≥Å‡≤≥‡≥ç‡≤≥‡≤ø", bread: "‡≤¨‡≥ç‡≤∞‡≥Ü‡≤°‡≥ç", rice: "‡≤Ö‡≤ï‡≥ç‡≤ï‡≤ø", milk: "‡≤π‡≤æ‡≤≤‡≥Å",
        water: "‡≤®‡≥Ä‡≤∞‡≥Å", juice: "‡≤∞‡≤∏", coffee: "‡≤ï‡≤æ‡≤´‡≤ø", tea: "‡≤ö‡≤π‡≤æ", book: "‡≤™‡≥Å‡≤∏‡≥ç‡≤§‡≤ï", pen: "‡≤™‡≥Ü‡≤®‡≥ç‡≤®‡≥Å",
        pencil: "‡≤™‡≥Ü‡≤®‡≥ç‡≤∏‡≤ø‡≤≤‡≥ç", notebook: "‡≤®‡≥ã‡≤ü‡≥ç‡≤¨‡≥Å‡≤ï‡≥ç", paper: "‡≤ï‡≤æ‡≤ó‡≤¶", eraser: "‡≤Ö‡≤≥‡≤ø‡≤∏‡≥Å‡≤µ ‡≤ó‡≤Æ‡≥ç",
        ruler: "‡≤∏‡≥ç‡≤ï‡≥á‡≤≤‡≥Å", scissors: "‡≤ï‡≤§‡≥ç‡≤§‡≤∞‡≤ø", person: "‡≤µ‡≥ç‡≤Ø‡≤ï‡≥ç‡≤§‡≤ø", maleperson: "‡≤™‡≥Å‡≤∞‡≥Å‡≤∑", female: "‡≤Æ‡≤π‡≤ø‡≤≥‡≥Ü",
        child: "‡≤Æ‡≤ó‡≥Å", baby: "‡≤∂‡≤ø‡≤∂‡≥Å", teacher: "‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤ï", student: "‡≤µ‡≤ø‡≤¶‡≥ç‡≤Ø‡≤æ‡≤∞‡≥ç‡≤•‡≤ø", doctor: "‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø",
        farmer: "‡≤∞‡≥à‡≤§", house: "‡≤Æ‡≤®‡≥Ü", school: "‡≤∂‡≤æ‡≤≤‡≥Ü", hospital: "‡≤Ü‡≤∏‡≥ç‡≤™‡≤§‡≥ç‡≤∞‡≥Ü", shop: "‡≤Ö‡≤Ç‡≤ó‡≤°‡≤ø",
        park: "‡≤â‡≤¶‡≥ç‡≤Ø‡≤æ‡≤®", road: "‡≤∞‡≤∏‡≥ç‡≤§‡≥Ü", bridge: "‡≤∏‡≥á‡≤§‡≥Å‡≤µ‡≥Ü", "potted plant": "‡≤ó‡≤ø‡≤°‡≤¶ ‡≤ï‡≥Å‡≤Ç‡≤°",
        umbrella: "‡≤õ‡≤§‡≥ç‡≤∞‡≤ø", bag: "‡≤ö‡≥Ä‡≤≤"
    };

    const apiUrl = "https://libretranslate.de/translate";
    const requestBody = {
        q: text,
        source: "en",
        target: "kn",
        format: "text"
    };

    fetch(apiUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody)
    })
        .then((response) => response.json())
        .then((data) => {
        let kannadaWord = "---";
        if (data.translatedText && data.translatedText !== text) {
            kannadaWord = data.translatedText;
        } else {
            kannadaWord = localTranslations[text.toLowerCase()] || "‡≤Ö‡≤®‡≥Å‡≤µ‡≤æ‡≤¶ ‡≤á‡≤≤‡≥ç‡≤≤";
        }

        const kannadaTranslation = kannadaWord;
        const kanglishTranslation = kannadaWord === "‡≤Ö‡≤®‡≥Å‡≤µ‡≤æ‡≤¶ ‡≤á‡≤≤‡≥ç‡≤≤" ? "No translation" : convertToKanglish(kannadaWord);
        detectedObjectsList.innerHTML += `<li class="kannada-translation">üåç Kannada: ${kannadaTranslation}</li>
            <li>üî§ Kanglish: ${kanglishTranslation}</li>`;
        speakBtn.setAttribute("data-kannada", kannadaTranslation);
        speakBtn.setAttribute("data-kanglish", kanglishTranslation);
        speakBtn.disabled = (kannadaTranslation === "‡≤Ö‡≤®‡≥Å‡≤µ‡≤æ‡≤¶ ‡≤á‡≤≤‡≥ç‡≤≤" || kannadaTranslation === "---");
        loadingDiv.style.display = "none";
        })
        .catch((error) => {
        console.error("Translation error:", error);
        const fallbackKannada = localTranslations[text.toLowerCase()] || "‡≤Ö‡≤®‡≥Å‡≤µ‡≤æ‡≤¶ ‡≤á‡≤≤‡≥ç‡≤≤";
        const kanglishTranslation = fallbackKannada === "‡≤Ö‡≤®‡≥Å‡≤µ‡≤æ‡≤¶ ‡≤á‡≤≤‡≥ç‡≤≤" ? "No translation" : convertToKanglish(fallbackKannada);
        detectedObjectsList.innerHTML += `<li class="kannada-translation">üåç Kannada: ${fallbackKannada}</li>
            <li>üî§ Kanglish: ${kanglishTranslation}</li>`;
        speakBtn.setAttribute("data-kannada", fallbackKannada);
        speakBtn.setAttribute("data-kanglish", kanglishTranslation);
        speakBtn.disabled = (fallbackKannada === "‡≤Ö‡≤®‡≥Å‡≤µ‡≤æ‡≤¶ ‡≤á‡≤≤‡≥ç‡≤≤");
        loadingDiv.style.display = "none";
        });
    }

    // Advanced Kanglish Conversion Function
    function convertToKanglish(kannadaText) {
    const vowels = "‡≤Ö‡≤Ü‡≤á‡≤à‡≤â‡≤ä‡≤ã‡≤é‡≤è‡≤ê‡≤í‡≤ì‡≤î";
    const map = {
        '‡≤Ö': 'a', '‡≤Ü': 'aa', '‡≤á': 'i', '‡≤à': 'ii', '‡≤â': 'u', '‡≤ä': 'uu', '‡≤ã': 'ru',
        '‡≤é': 'e', '‡≤è': 'ee', '‡≤ê': 'ai', '‡≤í': 'o', '‡≤ì': 'oo', '‡≤î': 'au',
        '‡≤ï': 'ka', '‡≤ñ': 'kha', '‡≤ó': 'ga', '‡≤ò': 'gha', '‡≤ô': 'nga',
        '‡≤ö': 'cha', '‡≤õ': 'chha', '‡≤ú': 'ja', '‡≤ù': 'jha', '‡≤û': 'nya',
        '‡≤ü': 'ta', '‡≤†': 'tha', '‡≤°': 'da', '‡≤¢': 'dha', '‡≤£': 'na',
        '‡≤§': 'ta', '‡≤•': 'tha', '‡≤¶': 'da', '‡≤ß': 'dha', '‡≤®': 'na',
        '‡≤™': 'pa', '‡≤´': 'pha', '‡≤¨': 'ba', '‡≤≠': 'bha', '‡≤Æ': 'ma',
        '‡≤Ø': 'ya', '‡≤∞': 'ra', '‡≤≤': 'la', '‡≤µ': 'va',
        '‡≤∂': 'sha', '‡≤∑': 'sha', '‡≤∏': 'sa', '‡≤π': 'ha', '‡≤≥': 'la',
        '‡≤ï‡≥ç‡≤∑': 'ksha', '‡≤ú‡≥ç‡≤û': 'jna'
    };
    const diacritics = {
        '‡≤æ': 'aa', '‡≤ø': 'i', '‡≥Ä': 'ii', '‡≥Å': 'u', '‡≥Ç': 'uu', '‡≥É': 'ru',
        '‡≥Ü': 'e', '‡≥á': 'ee', '‡≥à': 'ai', '‡≥ä': 'o', '‡≥ã': 'oo', '‡≥å': 'au'
    };
    const virama = '‡≥ç';

    let result = '';
    let i = 0;
    while (i < kannadaText.length) {
        let char = kannadaText[i];
        if (vowels.includes(char)) {
        result += map[char] || char;
        i++;
        continue;
        }
        if (map[char]) {
        let transliteration = map[char];
        if (i + 1 < kannadaText.length && kannadaText[i + 1] === virama) {
            result += transliteration.slice(0, -1);
            i += 2;
        } else if (i + 1 < kannadaText.length && diacritics[kannadaText[i + 1]]) {
            result += transliteration.slice(0, -1) + diacritics[kannadaText[i + 1]];
            i += 2;
        } else {
            result += transliteration;
            i++;
        }
        continue;
        }
        if (diacritics[char]) {
        result += diacritics[char];
        i++;
        continue;
        }
        result += char;
        i++;
    }
    return result;
    }

    // Load Speech Synthesis Voices
    function loadVoices() {
    return new Promise((resolve) => {
        let voices = window.speechSynthesis.getVoices();
        if (voices.length > 0) {
        resolve(voices);
        } else {
        window.speechSynthesis.onvoiceschanged = () => {
            voices = window.speechSynthesis.getVoices();
            console.log("Available voices:", voices);
            resolve(voices);
        };
        }
    });
    }

    // Pronounce Kannada or Kanglish Text
    speakBtn.addEventListener("click", async () => {
    const kannadaText = speakBtn.getAttribute("data-kannada");
    const kanglishText = speakBtn.getAttribute("data-kanglish");

    if (!kannadaText || kannadaText === "‡≤Ö‡≤®‡≥Å‡≤µ‡≤æ‡≤¶ ‡≤á‡≤≤‡≥ç‡≤≤" || kannadaText === "---") {
        alert("No valid Kannada translation to pronounce.");
        return;
    }

    const voices = await loadVoices();
    const kannadaVoice = voices.find((voice) => voice.lang === "kn-IN");

    if (kannadaVoice) {
        const utterance = new SpeechSynthesisUtterance(kannadaText);
        utterance.lang = "kn-IN";
        utterance.voice = kannadaVoice;
        utterance.rate = 0.9;
        utterance.onerror = (event) => {
        console.error("Speech synthesis error:", event.error);
        alert("Failed to pronounce in Kannada. Check browser settings.");
        };
        window.speechSynthesis.speak(utterance);
    } else {
        const englishVoice = voices.find((voice) => voice.lang === "en-US");
        if (englishVoice && kanglishText !== "No translation") {
        const utterance = new SpeechSynthesisUtterance(kanglishText);
        utterance.lang = "en-US";
        utterance.voice = englishVoice;
        utterance.rate = 0.9;
        utterance.onerror = (event) => {
            console.error("Speech synthesis error:", event.error);
            alert("Failed to pronounce Kanglish. Check browser settings.");
        };
        window.speechSynthesis.speak(utterance);
        } else {
        alert("No suitable voice found for pronunciation. Please install Kannada language support in your browser or OS.");
        }
    }
    });

    // Preload voices
    window.speechSynthesis.getVoices();